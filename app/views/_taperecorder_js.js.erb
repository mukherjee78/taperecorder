//Steps that Taperecorder can record
// Given I am on <page_name>

// When/And I press <button>
// When/And I follow <link>
// When/And I fill in <field> with <value>
// When/And I select <value> from <field>
// When/And I check <field>
// When/And I uncheck <field>
// When/And I choose <field>
// When/And I attach the file <path> to <field>

// Then/And I should see <text>
// Then/And I should not see <text>
// Then/And I should be on <page_name>



// JS Hack
Element.prototype._addEventListener = Element.prototype.addEventListener;
Element.prototype.addEventListener = function(a,b,c) {
    var _classes = this.getAttribute("class") || "";
    this.setAttribute("class", _classes+" taperecorder_capture");
    this._addEventListener(a,b,c);
};


//Taperecorder is singleton
var Taperecorder = new function() {
    var _tape = this;

    //started/stopped
    _tape.status = function(_set_status) {
        var _status = _tape.getCookie('taperecorder') || "";
        
        if(_tape.is_blank(_status)){
            _tape.setCookie('taperecorder', 'stopped', 1);
            _status = 'stopped';
        }
        if(_set_status=='stopped' || _set_status=='started'){
            _tape.setCookie('taperecorder', _set_status, 1);
            _status = _set_status;
        }
        return _status;
    };
    _tape.start = function() {
        console.log("Starting Taperecorder...");

        _tape.status('started');

        _tape.bindClickEvents();
        _tape.bindKeyEvents();

        document.getElementById('taperecorder_start').style.display = "none";
        document.getElementById('taperecorder_stop').style.display = "block";

        if(_tape.scenario_present()){
            _tape.step("Then", "I should be on", window.location.pathname);
        }else{
            _tape.step("Given", "I am on", window.location.pathname);
        }

        _tape.event_lock = false;
        _tape.lock_manager = setInterval(function(){
            _tape.event_lock = false;
        }, 1000);
    };
    _tape.stop = function() {
        console.log("Stoping Taperecorder...");

        _tape.step("Then", "I should be on", window.location.pathname);
        _tape.step("Then", "I should see", "<replace this with a text you see in page>");
        _tape.step("Then", "I should not see", "<replace this with a text you see in page>");

        clearInterval(_tape.lock_manager);

        document.getElementById('taperecorder_start').style.display = "block";
        document.getElementById('taperecorder_stop').style.display = "none";

        _tape.status('stopped');

        _tape.flush();
    };


    _tape.scenario_present = function(){
        var taperecorder_scenario = localStorage.taperecorder_scenario || "";
        if(_tape.is_blank(taperecorder_scenario)){
            return false;
        }
        return true;
    };

    _tape.lastkey_present = function(){
        var taperecorder_lastkey = localStorage.taperecorder_lastkey || "";
        if(_tape.is_blank(taperecorder_lastkey)){
            return false;
        }
        return true;
    };
    //Flush existing steps from storage and show it in browser
    _tape.flush = function() {
        console.log("Flushing all steps...");
        alert(localStorage.taperecorder_scenario);
        localStorage.taperecorder_scenario = null;
        localStorage.taperecorder_lastkey = null;
    };
    //Add a step to local storage
    _tape.step = function(_key, _action, _field, _keyword,_value) {
        //Lock
        _tape.event_lock = true;

        //Sanitize
        _action = _tape.trim(_action);
        _field = _tape.trim(_field);
        if(!_tape.is_blank(_value))
            _value = _tape.trim(_value);
        if(!_tape.is_blank(_keyword))
            _keyword = _tape.trim(_keyword);

        var taperecorder_scenario = localStorage.taperecorder_scenario || "";

        var taperecorder_laststep = localStorage.taperecorder_laststep || "";
        var taperecorder_lastkey = localStorage.taperecorder_lastkey || "";


        if(!_tape.scenario_present()){
            taperecorder_scenario = "Scenario: Generated by Taperecorder, Please replace this line with actual Scenario.\n\n";
        }
        if(!_tape.lastkey_present()){
            taperecorder_lastkey = "Given";
        } 
        if(_tape.lastkey_present() && taperecorder_lastkey==_key){
            taperecorder_lastkey = "And";
        }else{
            taperecorder_lastkey = _key;
        }

        if(!_tape.is_blank(_keyword) && !_tape.is_blank(_value)){
            var _step =  _action + " \"" + _field + "\" " + _keyword + " \"" + _value + "\" " + "\n";
        }else{
            var _step = _action + " \"" + _field + "\" " + "\n";
        }
        if (localStorage.taperecorder_laststep == _step)
            return;

        taperecorder_scenario = taperecorder_scenario + taperecorder_lastkey + " " + _step;

        localStorage.taperecorder_scenario = taperecorder_scenario;
        localStorage.taperecorder_laststep = _step;
        localStorage.taperecorder_lastkey = _key;

        console.log("Step added: "+taperecorder_scenario);
    };

    //Events
    _tape.bindClickEvents = function() {
        console.log("Binding Taperecorder click events...");
        document.addEventListener('click', function(e) { 
            e = e || window.event
            var target = e.target || e.srcElement;
            if(!_tape.event_lock && !_tape.hasClass(target, 'taperecorder')){
                if(/a/i.test( target.nodeName )){
                    _tape.step("When", "I follow", _tape.getTextOrId(target));
                }else if(/button/i.test( target.nodeName )){
                    _tape.step("When", "I press", _tape.getTextOrId(target));
                }else if(_tape.hasClass(target, 'taperecorder_capture')){
                    _tape.step("When", "I press", _tape.getTextOrId(target));
                }
            }
        }, true);
    };
    _tape.bindKeyEvents = function() {
        console.log("Binding Taperecorder key events...");
        document.addEventListener('keyup', function(e) { 
            e = e || window.event
            var target = e.target || e.srcElement;
            if(!_tape.event_lock && !_tape.hasClass(target, 'taperecorder')){
                if(/input|textarea/i.test( target.nodeName )){
                    var _current_input = target;
                    if(_tape.is_blank(_tape.last_input))
                        _tape.last_input = _current_input;

                    if(_tape.getLabelTextOrId(_tape.last_input) != _tape.getLabelTextOrId(_current_input)){
                        _tape.create_step_for_field(_tape.last_input);
                    }
                    //Finally record as last one
                    _tape.last_input = _current_input;
                }
            }
        }, true);
    };
    _tape.create_step_for_field = function(element){
        if(/text|password/i.test( element.getAttribute('type') ) || element.nodeName=="textarea")
            _tape.step("When", "I fill in", _tape.getTextOrId(element), "with", _tape.getValue(element));
        else if(/file/i.test( element.getAttribute('type') ))
            _tape.step("When", "I attach the file", _tape.getValue(element), "to", _tape.getTextOrId(element));
    };

    //Utilities
    _tape.is_blank = function(txt){
        if(typeof txt == typeof undefined || txt == null || txt == "" || txt == "undefined" || txt == "null"){
            return true;
        }
        return false;
    };
    _tape.trim = function(str){
        return str.replace(/(\r\n|\n|\r)/gm,"").trim();
    };
    _tape.getValue = function(element) {
        return element.value;
    };
    _tape.getTextOrId = function(element) {
        var txt = element.textContent || element.innerText;
        txt = _tape.trim(txt);
        if(_tape.is_blank(txt)){
            txt = element.id || element.getAttribute('name');
        }
        return txt;
    };
    _tape.getLabelTextOrId = function(element) {
       var idVal = element.id;
       labels = document.getElementsByTagName('label');
       for( var i = 0; i < labels.length; i++ ) {
          if (labels[i].htmlFor == idVal)
               return labels[i].textContent || labels[i].innerText;
       }
       return element.id || element.getAttribute('name');
    };
    _tape.hasClass = function(element, cls) {
        return (' ' + element.className + ' ').indexOf(' ' + cls + ' ') > -1;
    };

    _tape.setCookie = function(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays*24*60*60*1000));
        var expires = "expires="+ d.toUTCString();
        document.cookie = cname + "=" + cvalue + "; " + expires;
    };
    _tape.getCookie = function(cname) {
        var name = cname + "=";
        var ca = document.cookie.split(';');
        for(var i = 0; i <ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0)==' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length,c.length);
            }
        }
        return "";
    };
};


jQuery(document).ready(function(){
    if(Taperecorder.scenario_present())
        Taperecorder.start();
});